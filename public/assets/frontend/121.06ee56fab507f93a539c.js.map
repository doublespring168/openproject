{"version":3,"sources":["./node_modules/codemirror/mode/yaml-frontmatter/yaml-frontmatter.js"],"names":["CodeMirror","defineMode","config","parserConfig","yamlMode","getMode","innerMode","base","curMode","state","startState","inner","copyState","token","stream","match","end","sol","style","mode","blankLine"],"mappings":"kFAGA,IAOaA,IALL,EAAQ,QAAyB,EAAQ,QAU/CA,EAAWC,WAAW,oBAAoB,SAAUC,EAAQC,GAC1D,IAAIC,EAAWJ,EAAWK,QAAQH,EAAQ,QACtCI,EAAYN,EAAWK,QAAQH,EAAQC,GAAgBA,EAAaI,MAAQ,OAEhF,SAASC,EAAQC,GACf,OARmC,GAQ5BA,EAAMA,MAAgBH,EAAYF,EAG3C,MAAO,CACLM,WAAY,WACV,MAAO,CACLD,MAdI,EAeJE,MAAOX,EAAWU,WAAWN,KAGjCQ,UAAW,SAAUH,GACnB,MAAO,CACLA,MAAOA,EAAMA,MACbE,MAAOX,EAAWY,UAAUJ,EAAQC,GAAQA,EAAME,SAGtDE,MAAO,SAAUC,EAAQL,GACvB,GAzBM,GAyBFA,EAAMA,MACR,OAAIK,EAAOC,MAAM,OAAO,IACtBN,EAAMA,MA3Ba,EA4BZL,EAASS,MAAMC,EAAQL,EAAME,SAEpCF,EAAMA,MA9BuB,EA+B7BA,EAAME,MAAQX,EAAWU,WAAWJ,GAC7BA,EAAUO,MAAMC,EAAQL,EAAME,QAElC,GAlCgB,GAkCZF,EAAMA,MAAsB,CACrC,IAAIO,EAAMF,EAAOG,OAASH,EAAOC,MAAM,OAAO,GAC1CG,EAAQd,EAASS,MAAMC,EAAQL,EAAME,OAKzC,OAJIK,IACFP,EAAMA,MAtCuB,EAuC7BA,EAAME,MAAQX,EAAWU,WAAWJ,IAE/BY,EAEP,OAAOZ,EAAUO,MAAMC,EAAQL,EAAME,QAGzCL,UAAW,SAAUG,GACnB,MAAO,CAACU,KAAMX,EAAQC,GAAQA,MAAOA,EAAME,QAE7CS,UAAW,SAAUX,GACnB,IAAIU,EAAOX,EAAQC,GACnB,GAAIU,EAAKC,UAAW,OAAOD,EAAKC,UAAUX,EAAME","file":"121.06ee56fab507f93a539c.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../yaml/yaml\"))\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../yaml/yaml\"], mod)\n  else // Plain browser env\n    mod(CodeMirror)\n})(function (CodeMirror) {\n\n  var START = 0, FRONTMATTER = 1, BODY = 2\n\n  // a mixed mode for Markdown text with an optional YAML front matter\n  CodeMirror.defineMode(\"yaml-frontmatter\", function (config, parserConfig) {\n    var yamlMode = CodeMirror.getMode(config, \"yaml\")\n    var innerMode = CodeMirror.getMode(config, parserConfig && parserConfig.base || \"gfm\")\n\n    function curMode(state) {\n      return state.state == BODY ? innerMode : yamlMode\n    }\n\n    return {\n      startState: function () {\n        return {\n          state: START,\n          inner: CodeMirror.startState(yamlMode)\n        }\n      },\n      copyState: function (state) {\n        return {\n          state: state.state,\n          inner: CodeMirror.copyState(curMode(state), state.inner)\n        }\n      },\n      token: function (stream, state) {\n        if (state.state == START) {\n          if (stream.match(/---/, false)) {\n            state.state = FRONTMATTER\n            return yamlMode.token(stream, state.inner)\n          } else {\n            state.state = BODY\n            state.inner = CodeMirror.startState(innerMode)\n            return innerMode.token(stream, state.inner)\n          }\n        } else if (state.state == FRONTMATTER) {\n          var end = stream.sol() && stream.match(/---/, false)\n          var style = yamlMode.token(stream, state.inner)\n          if (end) {\n            state.state = BODY\n            state.inner = CodeMirror.startState(innerMode)\n          }\n          return style\n        } else {\n          return innerMode.token(stream, state.inner)\n        }\n      },\n      innerMode: function (state) {\n        return {mode: curMode(state), state: state.inner}\n      },\n      blankLine: function (state) {\n        var mode = curMode(state)\n        if (mode.blankLine) return mode.blankLine(state.inner)\n      }\n    }\n  })\n});\n"],"sourceRoot":"webpack:///"}